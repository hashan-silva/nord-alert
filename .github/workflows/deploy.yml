name: Build and Deploy Backend

permissions:
  contents: read

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-main
  cancel-in-progress: false

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/nord-alert-backend
      TFC_ORG: hashan-silva
      TFC_HOST: app.terraform.io
      TFC_WS_PREFIX: nord-alert-
    steps:
      - uses: actions/checkout@v4

      - name: Compute Terraform workspace from branch
        id: ws
        shell: bash
        run: |
          # Sanitize branch name for Terraform Cloud workspace (allow letters, numbers, -, _)
          SAFE=$(echo "${GITHUB_REF_NAME}" | sed -E 's/[^A-Za-z0-9_-]+/-/g')
          echo "name=${SAFE}" >> "$GITHUB_OUTPUT"

      - name: Detect backend changes
        id: backend_changed
        shell: bash
        run: |
          if git diff --quiet "$BASE" "$HEAD" -- backend; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
        env:
          BASE: ${{ github.event.before }}
          HEAD: ${{ github.sha }}

      - name: Compute image tag
        id: img
        shell: bash
        run: |
          if [ "${{ steps.backend_changed.outputs.changed }}" = "true" ]; then
            echo "tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Docker Buildx
        if: steps.backend_changed.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.backend_changed.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        if: steps.backend_changed.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:latest
            ${{ env.IMAGE_REPO }}:${{ steps.img.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          # Configure CLI credentials for Terraform Cloud
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init (Terraform Cloud Remote Backend)
        working-directory: terraform
        env:
          TF_WORKSPACE: ${{ steps.ws.outputs.name }}
        run: terraform init -input=false -reconfigure

      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_WORKSPACE: ${{ steps.ws.outputs.name }}
        run: terraform apply -auto-approve \
          -var="tenancy_ocid=${{ secrets.OCI_TENANCY_OCID }}" \
          -var="user_ocid=${{ secrets.OCI_USER_OCID }}" \
          -var="fingerprint=${{ secrets.OCI_FINGERPRINT }}" \
          -var="private_key='${{ secrets.OCI_PRIVATE_KEY }}'" \
          -var="region=${{ secrets.OCI_REGION }}" \
          -var="compartment_ocid=${{ secrets.OCI_COMPARTMENT_OCID }}" \
          -var="image=${{ env.IMAGE_REPO }}:${{ steps.img.outputs.tag }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -var="workspace_name=${{ steps.ws.outputs.name }}"

